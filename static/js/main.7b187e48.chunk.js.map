{"version":3,"sources":["components/corpo/Header.js","components/corpo/main/Baner.js","components/corpo/Main.js","components/Corpo.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","media","srcSet","process","src","alt","Component","Baner","id","image_gallery_default","items","original","autoPlay","showNav","showThumbnails","showPlayButton","showFullscreenButton","Main","main_Baner","Corpo","corpo_Header","corpo_Main","Menu","anchor_link_default","href","App","type","for","components_Menu","components_Corpo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAiBeA,0LAXP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,eACCF,EAAAC,EAAAC,cAAA,UAAQE,MAAM,qBAAqBC,OAAQC,mCAC3CN,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,iCAA4CE,IAAI,uBARnDC,+BCkCNC,mLAdX,OACCV,EAAAC,EAAAC,cAAA,OAAKS,GAAG,UACNX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAcY,MAjBE,CACjB,CACEC,SAAUR,yCAEZ,CACEQ,SAAUR,yCAEZ,CACEQ,SAAUR,yCAEZ,CACEQ,SAAUR,0CAOPS,UAAU,EACVC,SAAS,EACTC,gBAAgB,EAChBC,gBAAgB,EAChBC,sBAAsB,YA1BbV,aCWLW,mLARP,OACIpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAACmB,EAAD,cALMZ,aCaJa,mLATP,OACItB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,cANOf,8BCiBLgB,mLAfP,OACIzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,8CAEVN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAY0B,KAAK,UAAUxB,UAAU,SAArC,UACAH,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,IAAIxB,UAAU,SAAtB,UACAH,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,IAAIxB,UAAU,SAAtB,UACAH,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,IAAIxB,UAAU,SAAtB,mBAXKM,aCkBJmB,mLAdX,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,SAAO2B,KAAK,WAAWlB,GAAG,UAC1BX,EAAAC,EAAAC,cAAA,SAAOS,GAAG,SAASmB,IAAI,SAAQ9B,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,kCAA6CE,IAAI,UAG1FR,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAD,cAVUvB,aCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7b187e48.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n   \n\n    render() {\n        return (\n            <div className=\"header\">\n            \t<picture>\n            \t\t<source media=\"(max-width: 480px)\" srcSet={process.env.PUBLIC_URL + \"/img/logo-p.png\"}/>\n            \t\t<img src={process.env.PUBLIC_URL + \"/img/logo-g.png\"} alt=\"Logomarca\"/>\n            \t</picture>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport ImageGallery from 'react-image-gallery';\n\nclass Baner extends Component {\n \n\n    render() {\n        const images = [\n      {\n        original: process.env.PUBLIC_URL + '/img/baner/slide-1.png',\n      },\n      {\n        original: process.env.PUBLIC_URL + '/img/baner/slide-2.png',\n      },\n      {\n        original: process.env.PUBLIC_URL + '/img/baner/slide-3.png',\n      },\n      {\n        original: process.env.PUBLIC_URL + '/img/baner/slide-4.png',\n      }\n    ]\n \n    return (\n    \t<div id=\"inicio\">\t\n\t      <ImageGallery items={images} \n\t      \t\t\t\tautoPlay={true} \n\t      \t\t\t\tshowNav={false} \n\t      \t\t\t\tshowThumbnails={false} \n\t      \t\t\t\tshowPlayButton={false}\n\t      \t\t\t\tshowFullscreenButton={false}/>\n    \t</div>\n    );\n  }\n \n}\n\nexport default Baner;\n","import React, { Component } from 'react';\nimport Baner from './main/Baner';\n\nclass Main extends Component {\n    \n    render() {\n        return (\n            <div className=\"main\">\n            \t<Baner />\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","import React, { Component, } from 'react';\nimport Header from './corpo/Header';\nimport Main from './corpo/Main';\n\nclass Corpo extends Component {\n    \n    render() {\n        return (\n            <div className=\"corpo\">\n            \t<Header />\n            \t<Main />\n            </div>\n        );\n    }\n}\n\nexport default Corpo;\n","import React, { Component, } from 'react';\nimport AnchorLink from 'react-anchor-link-smooth-scroll'\n\nclass Menu extends Component {\n   \n    render() {\n        return (\n            <div className=\"menu\">\n            \t<img src={process.env.PUBLIC_URL + \"/img/logo-branco-minor.png\"} />\n            \t\n            \t<div className=\"navs\">\n            \t\t<AnchorLink href='#inicio' className=\"mlink\">Inicio</AnchorLink>\n            \t\t<a href=\"#\" className=\"mlink\">Link 2</a>\n            \t\t<a href=\"#\" className=\"mlink\">Link 3</a>\n            \t\t<a href=\"#\" className=\"mlink\">Link 4</a>\n            \t</div>\n            </div>\n        );\n    }\n}\n\nexport default Menu;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Corpo from './components/Corpo';\nimport Menu from './components/Menu';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        \n        <input type=\"checkbox\" id=\"check\"/>\n        <label id=\"botaoM\" for=\"check\"><img src={process.env.PUBLIC_URL + \"/img/menu-4x.png\"} alt=\"Menu\" /></label>\n        \n\n        <Menu />\n        <Corpo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"react-image-gallery/styles/css/image-gallery.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}